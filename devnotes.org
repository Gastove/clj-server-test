* Boy, this is hard.
* Functional CRUD
  What, really, is the difference between:
  1. Creating a new thing with new fields.
  2. Storing an old thing with existing fields?
  Really, it's only a question of where the fields come from -- do they need to be set,
  or do they already exist?

  What ID will a REST request process?

  + *So here's a thing*:
    - I've been calling a model an Atom, but right now they aren't returned as atoms from the DB.
      ...or are they?
      No. They really aren't. Anything coming out of the DB that I want to be atomic, is gonna
      have to be put back in an atom.

* To Do
  - Before we merge Redis in to master [4/7]
    - [X] Make sure tests clean up after themselves properly.
    - [ ] Do I actually have *anything* like test coverage?
    - [X] Integrate Dropbox with Redis
    - [X] Make sure that the Page REST API actually returns something that matches what
      ~frontend~ is expecting.
    - [ ] ...is there a way to test a REST API?
      ring.mock, it seems? Give it a go.
    - [ ] Clean up retrieve to stop passing ~model~. The model of a pobj is it's next-higher prototype.
    - [X] Need a ~remove~ function. Or delete.

  - Prepping to deploy to For Real Heroku [0/1]
    - [ ] Logging?
  - [1/2]
    - [X] Figure atoms out. Make this consistent
      This is.... better. Not great, but better.
    - [ ] On that note: any item that is an atom needs to deal with that for keymaking.

  - Other/misc/eventually [0/2]
    - [ ] Perhaps each level of a pobj should *say* what their lookup-key is?
    - [ ] What the *hell* lein? (Dev deps. I don't get it.)
